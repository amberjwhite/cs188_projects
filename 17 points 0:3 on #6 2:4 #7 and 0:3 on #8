17 points 0/3 on #6 2/4 #7 and 0/3 on #8
# search.py
# ---------
# Licensing Information:  You are free to use or extend these projects for
# educational purposes provided that (1) you do not distribute or publish
# solutions, (2) you retain this notice, and (3) you provide clear
# attribution to UC Berkeley, including a link to http://ai.berkeley.edu.
# 
# Attribution Information: The Pacman AI projects were developed at UC Berkeley.
# The core projects and autograders were primarily created by John DeNero
# (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
# Student side autograding was added by Brad Miller, Nick Hay, and
# Pieter Abbeel (pabbeel@cs.berkeley.edu).


"""
In search.py, you will implement generic search algorithms which are called by
Pacman agents (in searchAgents.py).
"""

import util

class SearchProblem:
    """
    This class outlines the structure of a search problem, but doesn't implement
    any of the methods (in object-oriented terminology: an abstract class).

    You do not need to change anything in this class, ever.
    """

    def getStartState(self):
        """
        Returns the start state for the search problem.
        """
        util.raiseNotDefined()

    def isGoalState(self, state):
        """
          state: Search state

        Returns True if and only if the state is a valid goal state.
        """
        util.raiseNotDefined()

    def getSuccessors(self, state):
        """
          state: Search state

        For a given state, this should return a list of triples, (successor,
        action, stepCost), where 'successor' is a successor to the current
        state, 'action' is the action required to get there, and 'stepCost' is
        the incremental cost of expanding to that successor.
        """
        util.raiseNotDefined()

    def getCostOfActions(self, actions):
        """
         actions: A list of actions to take

        This method returns the total cost of a particular sequence of actions.
        The sequence must be composed of legal moves.
        """
        util.raiseNotDefined()


def tinyMazeSearch(problem):
    """
    Returns a sequence of moves that solves tinyMaze.  For any other maze, the
    sequence of moves will be incorrect, so only use this for tinyMaze.
    """
    from game import Directions
    s = Directions.SOUTH
    w = Directions.WEST
    return  [s, s, w, s, w, w, s, w]

def depthFirstSearch(problem):
    """
    Search the deepest nodes in the search tree first.

    Your search algorithm needs to return a list of actions that reaches the
    goal. Make sure to implement a graph search algorithm.

    To get started, you might want to try some of these simple commands to
    understand the search problem that is being passed in:

    print("Start:", problem.getStartState())
    print("Is the start a goal?", problem.isGoalState(problem.getStartState()))
    print("Start's successors:", problem.getSuccessors(problem.getStartState()))
    """
    "*** YOUR CODE HERE ***"

    fringe = []
    start = (problem.getStartState(), [], [])
    fringe.append(start)
    visted = set()
    

    while len(fringe) > 0:
        point, directions, cost = fringe.pop()
        if point not in visted:
            visted.add(point)
            #explore curr node
                #append direction
            
                #check goal
            if problem.isGoalState(point):
                print("DFS")
                return directions
            else:
                for p, d, c in problem.getSuccessors(point):
                    fringe += [(p, directions + [d], cost + [c])]


def breadthFirstSearch(problem):
    """Search the shallowest nodes in the search tree first."""
    "*** YOUR CODE HERE ***"
    fringe = util.Queue()
    start = (problem.getStartState(), [], [])
    fringe.push(start)
    visted = []

    while not fringe.isEmpty():
        point, directions, cost = fringe.pop()
        #print("bfs point poppped", point)
        if problem.isGoalState(point):
            return directions
        elif not point in visted:
            visted += [point]
            for state, d, c in problem.getSuccessors(point):
                fringe.push((state, directions + [d], cost + [c]))

    #util.raiseNotDefined()



def uniformCostSearch(problem):
    """Search the node of least total cost first."""
    "*** YOUR CODE HERE ***"
    fringe = util.PriorityQueue()
    start = (problem.getStartState(), [])
    fringe.push(start, 10)
    visted = set()
    bestCost = {}
    bestCost[start[0]] = 0

    while not fringe.isEmpty():
        point, directions = fringe.pop()
        if problem.isGoalState(point):
            print(directions)
            print("UCS")
            return directions
        elif not point in visted:
            visted.add(point)
            for p, d, cost in problem.getSuccessors(point):
                bestCost[p] = bestCost[point] + cost
                fringe.push((p, directions + [d]), bestCost[p])

    #util.raiseNotDefined()

def nullHeuristic(state, problem=None):
    """
    A heuristic function estimates the cost from the current state to the nearest
    goal in the provided SearchProblem.  This heuristic is trivial.
    """
    return 0

def aStarSearch(problem, heuristic=nullHeuristic):
    """Search the node that has the lowest combined cost and heuristic first."""

    node = (problem.getStartState(), [])
    priority = {}
    print(node)
    priority[node[0]] = heuristic(node[0], problem) #####

    fringe = util.PriorityQueue()
    fringe.push(node, heuristic(node[0], problem))
    visited = {}

    while not fringe.isEmpty():
        curr_node, moves = fringe.pop()

        if problem.isGoalState(curr_node):
            #print
            return moves
        elif not curr_node in visited:
            visited[curr_node] = 1
            for next_node, next_move, cost in problem.getSuccessors(curr_node):
                priority[next_node] = problem.getCostOfActions(moves + [next_move]) + heuristic(next_node, problem) 
                fringe.push((next_node, moves + [next_move]) , priority[next_node])




    #util.raiseNotDefined()
"""
        if (isinstance(point[0], tuple)):  #######ok
            point = point[0]
"""

# Abbreviations
bfs = breadthFirstSearch
dfs = depthFirstSearch
astar = aStarSearch
ucs = uniformCostSearch

